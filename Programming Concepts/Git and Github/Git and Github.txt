Git is a Distributed Version Control System

Why Git?
	We Developers write code and make projects or apps together.
	These apps would have versions to maintain them in folder bases 
	to simplify the process, git has been introduced.

What is Distributed?
	In olden Days we used CVCS (Centralized Version Control System)
	but the problem here is that the code will be only on one single server.
	So if anything to that server the total code will be gone. There is a single point of failure.
	So in git (Distributed version control system) the project will be
	both on server and at our local machine by if server fails then there is no problem.
	So it's called Distributed.

What is Version Control System?
	Version Control is about maintaining versions.
	like adding features , removing features and updating features.
	So to track of them we use git so it is called Distributed version control system.

1. Repository:
	These is the place where the code is kept.
	We can imagine it has a folder which has the whole project.

2. Types of Repositories:
	Has git is a distributed version control system.
	So we have Two Types of Repositories:
		There are local and remote repositories.
		1. Local Repository:
			Local Repository is the place where your working code
			is there with you. Everyone has their own local Repository

		2. Remote Repository:
			Remote Repository is the place where code is original code
			is kept. It will be in a server.

3. Branches:
	Now the main project is known has the Master Branch which is in server.
	Now if youâ€™re working on a Major version now then someone asks to fix problems
	in a before version it is possible with git because it give the power
	to split the project into parts known as Branches.

4. Commit:
	 To save our code in Remote repository from our Local repository.
	 we use commit to merge (connect) the code to Remote repository.
	 To commit the code we need to accept it by saying Merge.

5. Clone:
	In order to work with a remote repository.
	First we need to clone it. That means we are making a local copy of
	remote repository. Then we can work on it.

6. Push:
	If we make a local repository.
	To send it to server.
	So it's a remote repository. We need to push it. 
	If We also make any changes to a remote repository we need to push it.

7. Pull:
	We need to pull remote repository if any changes are made by others to it.

8. Git Commands:
	To do these all things through git we use Git Bash
	through commands and also with Github.

	usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           	[--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
          	 [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           	[--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           	<command> [<args>]

	These are common Git commands used in various situations:

	start a working area (see also: git help tutorial)
   		clone             Clone a repository into a new directory
   		init              Create an empty Git repository or reinitialize an existing one

	work on the current change (see also: git help everyday)
   		add               Add file contents to the index
   		mv                Move or rename a file, a directory, or a symlink
   		restore           Restore working tree files
   		rm                Remove files from the working tree and from the index
   		sparse-checkout   Initialize and modify the sparse-checkout

	examine the history and state (see also: git help revisions)
   		bisect            Use binary search to find the commit that introduced a bug
   		diff              Show changes between commits, commit and working tree, etc
   		grep              Print lines matching a pattern
   		log               Show commit logs
   		show              Show various types of objects
   		status            Show the working tree status

	grow, mark and tweak your common history
   		branch            List, create, or delete branches
   		commit            Record changes to the repository
  	 	merge             Join two or more development histories together
   		rebase            Reapply commits on top of another base tip
   		reset             Reset current HEAD to the specified state
   		switch            Switch branches
   		tag               Create, list, delete or verify a tag object signed with GPG

	collaborate (see also: git help workflows)
   		fetch             Download objects and refs from another repository
   		pull              Fetch from and integrate with another repository or a local branch
   		push              Update remote refs along with associated objects

	'git help -a' and 'git help -g' list available subcommands and some
	concept guides. See 'git help <command>' or 'git help <concept>'
	to read about a specific subcommand or concept.
	See 'git help git' for an overview of the system.

	1. Commonly used git Commands:
		1. Configuration:
			To set username == git config --global user.name "<name>"
			To set email == git config --global user.email "<email>"
			To view username == git config --global user.name
			To view email == git config --global user.email
			To view the list of git config == git config --list
			To set alias of a command == git config --global alias.<name of your command> <actual command>

		2. Status of repositories:
			To check status of staging area == git status 
			To check status of staging area in short == git status -s

		3. Making repositories:
			To create a new repository locally == git init  
			To clone a repository == git clone <remote url (or) folder path>

		4. Ignoring files:
			To create gitignore == touch .gitignore

		5. Staging area:
			To stage a file == git add <file name> 
			To stage all files == git add . 
			To unstage a file == git reset <file name>
			To unstage all files == git reset
			To unstage uncommitted changes of a file == git restore --staged <file name>
			To unstage all uncommitted changes == git restore --staged .
			To view the difference between in staging area and previous commit == git diff

		6. Commits:
			To commit new changes == git commit -m "<commit message>"
			To skip staging area and commit == git commit -a -m "<commit message>"
			To go back in commits == git revert <commit hash>

		7. Remote repositories:
			To add a remote repository == git remote add origin <remote url> 
			To push local repository to a remote repository == git push -u origin <branch name>

		8. Viewing commits:
			To view the commits made == git log
			To view the commits in oneline == git log --oneline
			To view commits and code == git log -p
			To view commits in short == git log --stat

		9. Changing files:
			To move files from git == git mv <filename> <path to move>                   
			To remove a file or folder from git == git rm <file or folder name>   
			To untrack a file or a folder == git rm --cached <file or folder name>

		10. Branches:
			To view the branches == git branch 
			To view branch and it's previous commit == git branch -v
			To create a new branch == git branch <branch name>
			To switch between branches == git checkout <branch name to switch>  
			To create a new branch and switch to it == git checkout -b <branch name> 
			To push a branch to a remote repository == git push origin <branch name> (stay on the same branch to push the branch)
			
			To view the merged branches == git branch --merged
			To view the non-merged branches == git branch --no-merged
			To merge branches together == git merge <branch name> 

			If there is a merge conflict:
				1. Open file in editor 
				2. Solve merge conflicts 
				3. Add files
				4. Commit files

			To delete a branch == git branch -d <branch name>
			To forcefully delete a branch == git branch -D <branch name>
                        To delete a branch from remote repository == git push -d origin <branch name>
                        
		Note: To use these commands effectively we can use git bash (Unix (like Linux and Mac) based terminal).

10. Github:
	Github is a Git-hosting service.
	We can use both Git and Github together.
	and we usually create Remote Repositories in Github 
	and communicate with them by Git.
	We also have different services like Bit Bucket.
	Git and Github are totally different.

	1. Pull request:
		For instance if somebody want to give code to your project or contribute to project.
		To do this we have pull Request. These simply means 
		that person is sending you a request to commit.
		These code in your main project
		but git also allows us to test the code and checks without committing the code.
		Pull request is also used in merging the branches.

	2. Fork:
		Fork is a way to other people to contribute to your project.
		If you create or edit anything in other repository then it will be forked(cloned)
		in your machine as a local repository. After you change it you should commit it to 
		your repository. Then you can send a pull request to them.

    3. Github Keys:
        In Github to access private repository(before now it's allowed by signing in)
        We need SSH Keys.

        To generate key Enter this commands in git bash:
            ssh-keygen -t rsa -b 4096 -C "your_email@example.com" (After this press enter then confirm it by y or n)
            eval $(ssh-agent -s)
            ssh-add ~/.ssh/id_rsa (Adding the key)
            cat ~/.ssh/id_rsa.pub (Copy the output and paste it in key tab of github and give title)
            git remote set-url origin "SSH url of repository" (Setting url of repository to SSH url)

            Documentation: https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh

    4. To push a existing local repository to remote repository in github:
        Open git bash. Execute this commands

        1. To push a master branch of local repository:
            git remote add origin (repository url)
            git checkout master
            git push -u origin master (-u to not repeat the full command instead only git push command next time)

        2. To push any branch of local repository:
            git remote add origin (repository url)
            git push -u origin (branch name)

    5. Git and Github in Editors:
        1. In Pycharm:
            1. In pycharm close project.
            2. Click on "get from version control".
            3. Enter repository url in the url bar.
            4. Then do your changes.
            5. Commit the changes by right clicking the project and selecting git/commit repository.
            6. Add commit message and commit it.
            This will commit in your local repository.

            To push to remote repository.
                1. Right click on project select git/repository/push.
                2. This will push on remote repository

        2. In VS Code:
            1. Open command palette.
            2. Enter clone git repository.
            3. Enter the path of place you want to clone this repository.
            4. Make your changes.
            5. Commit it by going to source control to local repository.
            6. Push it to remote repository from source control.


    6. Gitpod:
        This is a Cloud (Online) IDE/Workspace to work with github and other git services.
        This is based on vs code.
